---
title: "Getting started with Shiny - layouts!"
author: "Casey O'Hara"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
---

# Setup

## Required packages:

* `shiny`
* `tidyverse`

## Some resources:

* This page has more details on how to apply different layouts into your Shiny App: [https://mastering-shiny.org/action-layout.html](https://mastering-shiny.org/action-layout.html)



# Single page layouts

## Get started:

(@) Create a new project in R
(@) Open a new R script (not Quarto, just script)
(@) Add the following at the top of the script:

```r
### Attach necessary packages
library(shiny)
library(tidyverse)

### Create the user interface:
ui <- fluidPage()

### Create the server function:
server <- function(input, output) {}

### Combine them into an app:
shinyApp(ui = ui, server = server)
```

(@) Save the script as `app.R` in a folder called `app1` or similar.
(@) Notice that a 'Run app' option shows up - but we know there's nothing in the app yet.


## Build a basic sidebar layout

This is the same layout we created in the first Shiny video, but we'll briefly recreate it here so we can see how other layouts differ.

(@) Here, we'll add a title panel, and a sidebar/main panel layout in our UI.

```r
<other code above>

### Create the user interface:
ui <- fluidPage(
  titlePanel('App title'),    # <1>
  sidebarLayout(              # <2>
    sidebarPanel(             # <3>
      h3('Sidebar header'),
      radioButtons(
        inputId = 'cyl_button',
        label = 'Number of cylinders',
        choices = c(4, 6, 8))
    ),
    mainPanel(                # <4>
      h3('Main panel header'),
      plotOutput('mpg_plot')
    )
  )
) ### end fluidPage

<other code below>
```
1. Inside `fluidPage()` create a `titlePanel` (top of the app)
2. `sidebarLayout` creates a layout that includes a narrow side panel and large main panel
3. Define the `sidebarPanel`
4. Define the `mainPanel`

(@) Save.  Next let's define a server to react to our input and create a plot.


## Build a reactive plot in the server


(@) In the `server()`, create a reactive subset of the built in `mtcars` df that only includes cars with the number of cylinders (`mtcars$cyl`) selected by the user. Then, create a reactive ggplot of the miles per gallon (`mpg`) vs. weight of the car (`wt`), and have it show up in our UI (main panel),  We already put the code for the plot in the UI: `plotOutput('mpg_plot')`.  Because this is a simple one, we can filter on the fly.  For more complex analysis, use `reactive()` functions and pass the output of the `reactive()` to the ggplot (bonus, you can use the same reactive in multiple places if you like).



```r
<other code above>

server <- function(input, output) {
  output$mpg_plot <- renderPlot({
    ggplot(mtcars %>% filter(cyl == input$cyl_button), 
           aes(x = wt, y = mpg)) +
      geom_point()
  })
}

<other code below>
```

(@) Save the app and run it.  Note the title panel, the sidebar panel, and the main panel.

## Let's try a more flexible layout

(@) Comment out the sidebarLayout code, using command-shift-C.  We'll copy and paste the widgets etc. in just a minute.

(@) Now we'll use the `fluidRow` type of layout, which can create rows with columns of different widths within them.  This gives more control over the layout than `sidebarLayout`.

```r
<other code above>

ui <- fluidPage(
  titlePanel('App title'),
  # sidebarLayout(                          # <1>
  #   sidebarPanel(
  #     h3('Sidebar header'),
  #     radioButtons(
  #       inputId = 'cyl_button',
  #       label = 'Number of cylinders',
  #       choices = c(4, 6, 8))
  #   ),
  #   mainPanel(
  #     h3('Main panel header'),
  #     plotOutput('mpg_plot')
  #   )
  # )
  fluidRow(         # <2>
    column(         # <3>
      width = 6,
      h3('Header for first row, first column'),
      selectInput(inputId = 'test', label = 'choose',
                  choices = c(month.name))
    ),
    column(         # <4>
      width = 6,
      h2('Header for first row, second column'),
      radioButtons(inputId = 'test2', label = 'click',
                   choices = 1:5)
    )
  ), ### end fluidRow 1

  hr(), ### horizontal rule so the row breaks are easier to see
  p('Here is some text between row 1 and 2 if you like'),
  hr(),

  fluidRow(
    column(
      width = 8,
      h2('Here is a header for row 2, column 1'),
      hr()
    ),
    column(
      width = 4,
      h4('here is a header for row 2, column 2'),
      textInput(inputId = 'text', label = 'type', width = '100%')
    )
  ) ### end fluidRow 2
) ### end fluidPage

<other code below>
```
1. Comment out the previous layout.
2. Define a new row in a fluid layout
3. Define a column inside the new row.  Width is based on total width of 12 units, so width = 6 means a column half as wide as the page.
4. Still within the first row, define a second column.

(@) Save this and run this.  Play around with the rows, columns, widths, etc.  Copy those inputs from earlier into the various columns, and try to get the basic functionality to work, with input widgets in some locations and outputs in other locations.

# Tabset page layout

